--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode317w[1..0]	: WIRE;
	w_anode326w[3..0]	: WIRE;
	w_anode343w[3..0]	: WIRE;
	w_anode353w[3..0]	: WIRE;
	w_anode363w[3..0]	: WIRE;
	w_anode373w[3..0]	: WIRE;
	w_anode383w[3..0]	: WIRE;
	w_anode393w[3..0]	: WIRE;
	w_anode403w[3..0]	: WIRE;
	w_anode415w[1..0]	: WIRE;
	w_anode422w[3..0]	: WIRE;
	w_anode433w[3..0]	: WIRE;
	w_anode443w[3..0]	: WIRE;
	w_anode453w[3..0]	: WIRE;
	w_anode463w[3..0]	: WIRE;
	w_anode473w[3..0]	: WIRE;
	w_anode483w[3..0]	: WIRE;
	w_anode493w[3..0]	: WIRE;
	w_data315w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode493w[3..3], w_anode483w[3..3], w_anode473w[3..3], w_anode463w[3..3], w_anode453w[3..3], w_anode443w[3..3], w_anode433w[3..3], w_anode422w[3..3]), ( w_anode403w[3..3], w_anode393w[3..3], w_anode383w[3..3], w_anode373w[3..3], w_anode363w[3..3], w_anode353w[3..3], w_anode343w[3..3], w_anode326w[3..3]));
	w_anode317w[] = ( (w_anode317w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode326w[] = ( (w_anode326w[2..2] & (! w_data315w[2..2])), (w_anode326w[1..1] & (! w_data315w[1..1])), (w_anode326w[0..0] & (! w_data315w[0..0])), w_anode317w[1..1]);
	w_anode343w[] = ( (w_anode343w[2..2] & (! w_data315w[2..2])), (w_anode343w[1..1] & (! w_data315w[1..1])), (w_anode343w[0..0] & w_data315w[0..0]), w_anode317w[1..1]);
	w_anode353w[] = ( (w_anode353w[2..2] & (! w_data315w[2..2])), (w_anode353w[1..1] & w_data315w[1..1]), (w_anode353w[0..0] & (! w_data315w[0..0])), w_anode317w[1..1]);
	w_anode363w[] = ( (w_anode363w[2..2] & (! w_data315w[2..2])), (w_anode363w[1..1] & w_data315w[1..1]), (w_anode363w[0..0] & w_data315w[0..0]), w_anode317w[1..1]);
	w_anode373w[] = ( (w_anode373w[2..2] & w_data315w[2..2]), (w_anode373w[1..1] & (! w_data315w[1..1])), (w_anode373w[0..0] & (! w_data315w[0..0])), w_anode317w[1..1]);
	w_anode383w[] = ( (w_anode383w[2..2] & w_data315w[2..2]), (w_anode383w[1..1] & (! w_data315w[1..1])), (w_anode383w[0..0] & w_data315w[0..0]), w_anode317w[1..1]);
	w_anode393w[] = ( (w_anode393w[2..2] & w_data315w[2..2]), (w_anode393w[1..1] & w_data315w[1..1]), (w_anode393w[0..0] & (! w_data315w[0..0])), w_anode317w[1..1]);
	w_anode403w[] = ( (w_anode403w[2..2] & w_data315w[2..2]), (w_anode403w[1..1] & w_data315w[1..1]), (w_anode403w[0..0] & w_data315w[0..0]), w_anode317w[1..1]);
	w_anode415w[] = ( (w_anode415w[0..0] & data_wire[3..3]), enable_wire);
	w_anode422w[] = ( (w_anode422w[2..2] & (! w_data315w[2..2])), (w_anode422w[1..1] & (! w_data315w[1..1])), (w_anode422w[0..0] & (! w_data315w[0..0])), w_anode415w[1..1]);
	w_anode433w[] = ( (w_anode433w[2..2] & (! w_data315w[2..2])), (w_anode433w[1..1] & (! w_data315w[1..1])), (w_anode433w[0..0] & w_data315w[0..0]), w_anode415w[1..1]);
	w_anode443w[] = ( (w_anode443w[2..2] & (! w_data315w[2..2])), (w_anode443w[1..1] & w_data315w[1..1]), (w_anode443w[0..0] & (! w_data315w[0..0])), w_anode415w[1..1]);
	w_anode453w[] = ( (w_anode453w[2..2] & (! w_data315w[2..2])), (w_anode453w[1..1] & w_data315w[1..1]), (w_anode453w[0..0] & w_data315w[0..0]), w_anode415w[1..1]);
	w_anode463w[] = ( (w_anode463w[2..2] & w_data315w[2..2]), (w_anode463w[1..1] & (! w_data315w[1..1])), (w_anode463w[0..0] & (! w_data315w[0..0])), w_anode415w[1..1]);
	w_anode473w[] = ( (w_anode473w[2..2] & w_data315w[2..2]), (w_anode473w[1..1] & (! w_data315w[1..1])), (w_anode473w[0..0] & w_data315w[0..0]), w_anode415w[1..1]);
	w_anode483w[] = ( (w_anode483w[2..2] & w_data315w[2..2]), (w_anode483w[1..1] & w_data315w[1..1]), (w_anode483w[0..0] & (! w_data315w[0..0])), w_anode415w[1..1]);
	w_anode493w[] = ( (w_anode493w[2..2] & w_data315w[2..2]), (w_anode493w[1..1] & w_data315w[1..1]), (w_anode493w[0..0] & w_data315w[0..0]), w_anode415w[1..1]);
	w_data315w[2..0] = data_wire[2..0];
END;
--VALID FILE
